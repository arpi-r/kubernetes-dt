module K8sDT;

import * from K8sService;
import * from K8sMaster;
import * from K8sUtil;
import * from K8sWorkflow;
import * from ABS.DC;

interface Client{
	List<Rat> start();
}
class ClientWorkflow(ServiceTask t,Int times,Rat delay,Int timesGranularity) implements Client {

	List<Rat> start(){
		Rat partialResponseTime = 0;
		List<Rat> responseTimes = list[];
		List<Fut<Rat>> rTimes = list[];
		Int counter = times;

		while(counter > 0){
			Fut<Rat> fTime = t!execute();
			rTimes = appendright(rTimes,fTime);
			counter = counter - 1;

			await duration(delay,delay);
		}

		Int partialCounter = timesGranularity;

		foreach (tf in rTimes){
			await tf?;
			Rat t = tf.get;

			partialResponseTime = partialResponseTime + t;
			partialCounter = partialCounter - 1;
			if (partialCounter == 0) {
				partialCounter = timesGranularity;
				partialResponseTime = partialResponseTime / timesGranularity;
				responseTimes = appendright(responseTimes,partialResponseTime);
				partialResponseTime = 0;
			}
		}

		return responseTimes;
	}
}

{
	CloudProvider cp = new CloudProvider("Cloud");
	Master master;
	Bool fb = False;

	Printer printer = new PrinterObject();

	master = new MasterObject(cp,1,1,1);
