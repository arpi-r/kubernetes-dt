module K8sDT_old;

import * from K8sService;
import * from K8sMaster;
import * from K8sUtil;
import * from ABS.DC;
import * from ABS.FLI;

// docker run --rm -v "$PWD":/usr/src -w /usr/src abslang/absc:latest --erlang ./model/K8sService.abs ./model/K8sMaster.abs ./model/K8sUtil.abs ./model/K8sWorkflow.abs ./K8sDT_old.abs
// java -jar absfrontend.jar --erlang ./model/K8sService.abs ./model/K8sMaster.abs ./model/K8sUtil.abs ./model/K8sWorkflow.abs ./K8sDT_old.abs 
// ./gen/erl/run

{
  CloudProvider cp = new CloudProvider("Cloud");
  Master master;
  Bool fb = False;
  Bool deployTime = True;
  Int loopCount = 0;

  // PodConfig pConfig1 = PodConfig(1, 1, 0, 1000, 2500);

  Printer printer = new PrinterObject();

  println("\n\nBefore loop\n");

  while (loopCount < 2) {

    if (deployTime) {
      master = new MasterObject(cp,1,1,1);
      fb = master.createNode(3800,4000); // 0 - 10
      fb = master.createNode(3795,4000); // 1 - 9
      fb = master.createNode(3700,4000); // 2 - 11

      println("\n\nNode info at k8s cluster deploy time:\n");
      await printer!printNodes(master,1,1);

      List<Node> nodeList = master.getNodes();

      String name = "test-name-";
      Int name_count = 1;
      foreach (node in nodeList) {
        node!setName(name + toString(name_count));
        name_count = name_count + 1;
      }

      deployTime = False;
      loopCount = loopCount + 1;

      // List<Node> nodeList = master.getNodes();
      Int c = 0;
      foreach (node in nodeList) {

        // NodeResourcesMonitor nrm = node.getMonitor();
        
        ResourcesMonitor pod = new ResourcesMonitorObject("service 1", 1, 2, 3);
        Pod p = new PodObject("service 1", c, 2, 2, 2, pod, 2, 2);
        p.setName("pod-" + toString(c));
        await node!addPod(p, pod);

        // NodeState ns = nrm.getNodeState();

        List<Pod> pods = node.getPods();

        foreach (podp in pods) {
          String podName = podp.getName();
          println(podName + " - pod exists!\n");
        }

        c = c + 1;

      }

      await duration(5,5);
    }
    else {

      println("\n\nNode info at time " + toString(loopCount) + ":\n");
      List<NodeState> nodeStateList = master.getNodesStates();
      await printer!printNodesStates(nodeStateList);

      loopCount = loopCount + 1;

      await duration(5,5);
    }
    
  }

  println("\n\nAfter loop\n");

}
