module Temp;

import * from K8sService;
import * from K8sMaster;
import * from K8sUtil;
import * from K8sWorkflow;
import * from ABS.DC;

interface Client{
  List<Rat> start();
}
class ClientWorkflow(ServiceTask t,Int times,Rat delay,Int timesGranularity) implements Client {

  List<Rat> start(){
    Rat partialResponseTime = 0;
    List<Rat> responseTimes = list[];
    List<Fut<Rat>> rTimes = list[];
    Int counter = times;

    while(counter > 0){
      Fut<Rat> fTime = t!execute();
      rTimes = appendright(rTimes,fTime);
      counter = counter - 1;

      await duration(delay,delay);
    }

    Int partialCounter = timesGranularity;

    foreach (tf in rTimes){
      await tf?;
      Rat t = tf.get;


      partialResponseTime = partialResponseTime + t;
      partialCounter = partialCounter - 1;
      if (partialCounter == 0) {
        partialCounter = timesGranularity;
        partialResponseTime = partialResponseTime / timesGranularity;
        responseTimes = appendright(responseTimes,partialResponseTime);
        partialResponseTime = 0;
      }
    }

    return responseTimes;

  }

}

{
	CloudProvider cp = new CloudProvider("Cloud");
	Master master;
	Bool fb = False;

	Printer printer = new PrinterObject();

	master = new MasterObject(cp,1,1,1);

	fb = master.createNode(232, 786056);
	fb = master.createNode(39, 236128);
	fb = master.createNode(64, 221424);
	fb = master.createNode(66, 209324);

	List<String> nodeNames = list[];
	nodeNames = appendright(nodeNames,"real-k8s-control-plane");
	nodeNames = appendright(nodeNames,"real-k8s-worker");
	nodeNames = appendright(nodeNames,"real-k8s-worker2");
	nodeNames = appendright(nodeNames,"real-k8s-worker3");

	List<List<Pod>> nodePodList = list[];
	List<Pod> podList = list[];
	nodePodList = appendright(nodePodList, podList);
	podList = list[];
	nodePodList = appendright(nodePodList, podList);
	podList = list[];

	ResourcesMonitor prm31 = new ResourcesMonitorObject("example1", 31, 1, 20);
	Pod p31 = new PodObject("example1", 31, 1, 20, 500, prm31, 1, 1);
	p31.setName("example1-75bb9ff9b9-wbwpd");
	p31.consumeCpu(20);
	p31.consumeMemory(7044);
	podList = appendright(podList, p31);
	nodePodList = appendright(nodePodList, podList);
	podList = list[];

	ResourcesMonitor prm41 = new ResourcesMonitorObject("example1", 41, 1, 18);
	Pod p41 = new PodObject("example1", 41, 1, 18, 500, prm41, 1, 1);
	p41.setName("example1-75bb9ff9b9-b9gkd");
	p41.consumeCpu(18);
	p41.consumeMemory(7700);
	podList = appendright(podList, p41);
	nodePodList = appendright(nodePodList, podList);
	podList = list[];

	List<Node> nodeList = master.getNodes();
	Int c = 0;
	foreach (node in nodeList) {
		String name = nth(nodeNames,c);
		node!setName(name);
		podList = nth(nodePodList,c);

		foreach (pod in podList) {
			ResourcesMonitor prm = pod.getMonitor();
			await node!addPod(pod,prm);
		}

		List<Pod> pods = node.getPods();
		await printer!printPods(pods);

		c = c + 1;
	}

	await printer!printNodes(master,1,1);

	List<Service> serviceList = list[];
	ServiceConfig service1Config = ServiceConfig("example1", 2, 1, 10, 1, 10/100, 5/100, 300);
	//Rat compUnitSize, Rat monitorCycle, Rat memoryCooldown, Rat cpuRequest, Rat cpuLimit
	PodConfig pod1Config = PodConfig(1, 1, 1, 20, 500);
	ServiceLoadBalancerPolicy policy = new RoundRobinLbPolicy();
	Service service1 = new ServiceObject(service1Config, pod1Config, policy);
	serviceList = appendright(serviceList, service1);

	List<ServiceEndpoint> endpoints = list[];

	foreach (service in serviceList) {
		master.deployService(service);
		ServiceEndpoint serviceEP = await service!getServiceEndpoint();
		endpoints = appendright(endpoints, serviceEP);
	}

	await printer!printService(service1, 1, 1);

	Request request1 = Request("request_1", 1000, 1, 2);
	Request request2 = Request("request_2", 1000, 1, 2);

	ServiceTask task1 = new ServiceRequest(nth(endpoints,0),request1);
	ServiceTask task2 = new ServiceRequest(nth(endpoints,0),request2);

	ServiceTask workflow1 = new ServiceWorkflow(Cons(list[task1],Cons(list[task2],Nil)));

	//ServiceTask t,Int times,Rat delay,Int timesGranularity
	Client c1 = new ClientWorkflow(workflow1,2,rat(1.0),1);
	List<Rat> rts = await c1!start();

	foreach (t in rts){
		println("c1 avg response time:" + toString(float(t)));
	}

	println("\n\nservice info:\n\n");
	await printer!printService(service1, 1, 1);

	await duration(5,5);
}
